/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'eclipse'
    id 'com.github.johnrengelman.shadow' version "7.1.2"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation group: 'io.nats', name: 'jnats', version: '2.14.0'
    implementation group: 'org.apache.kafka', name: 'kafka_2.13', version: '2.8.1'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.5.0'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.30'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.13.3'
}

application {
    // Define the main class for the application.
    mainClass = 'measurement.client.Measurement'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/configs"
        }
    }
}

jar {
    manifest {
        attributes (
            "Main-Class": "measurement.client.Measurement",
            "Class-Path": "./configs/ ../configs/",
        ) 
    }
    exclude("*.yaml")
}

eclipse.classpath.file {
    whenMerged { classpath ->
        classpath.entries.removeAll { entry -> (entry.path.endsWith('dll') || entry.path.endsWith('so') || entry.path.endsWith('dylib')) }
    }
}

eclipse.classpath.file {
    whenMerged {
        def jre_container = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
        jre_container.accessRules << new org.gradle.plugins.ide.eclipse.model.AccessRule("accessible", "javax/smartcardio/**")        
    }
}

eclipse.project {
    buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
    natures 'org.eclipse.buildship.core.gradleprojectnature'
}

tasks.eclipse.doFirst {
    File prefs = file(".settings/org.eclipse.buildship.core.prefs")
    if(!prefs.exists()){
        prefs.append('''
            connection.project.dir=
            eclipse.preferences.version=1
            '''.stripIndent())
    }
}